plugins {
    id 'com.android.application'
    id 'androidx.navigation.safeargs'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.5.31'
    // id 'com.google.devtools.ksp' version '1.8.10-1.0.9'
}
apply plugin: 'com.google.gms.google-services'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdk 33

    defaultConfig {
        applicationId "ch.karimattia.workoutpixel"
        minSdkVersion 28
        targetSdkVersion 33
        versionCode 7
        versionName "1.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildFeatures {
        // Enables Jetpack Compose for this module
        compose true
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            java {
                srcDirs 'src/main/java', 'src/main/java/2'
            }
        }
    }
    dependenciesInfo {
        includeInApk true
        includeInBundle true
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    kapt {
        correctErrorTypes true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.3'
    }
}

//noinspection SpellCheckingInspection
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.activity:activity-ktx:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.testng:testng:7.4.0'

    // Lifecycle components
    def lifecycleVersion = '2.6.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    // Kotlin components
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.4.0-rc01"

    // Room components
    def room_version = "2.5.0"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // implementation "androidx.room:room-runtime:$room_version"
    // annotationProcessor "androidx.room:room-compiler:$room_version"
    // ksp "androidx.room:room-compiler:$room_version"

    // androidTestImplementation "androidx.room:room-testing:$room_version"

    // Navigation
    // implementation "androidx.navigation:navigation-ui-ktx:2.4.0-alpha10"
    // Replaced by https://google.github.io/accompanist/navigation-animation
    // Jetpack Compose Integration
    implementation "androidx.navigation:navigation-compose:2.5.3"
    // https://google.github.io/accompanist/navigation-animation/
    // implementation "com.google.accompanist:accompanist-navigation-animation:0.20.0"
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'

    //Jetpack Compose UI
    implementation 'androidx.compose.ui:ui:1.4.0-rc01'
    // Tooling support (Previews, etc.)
    implementation 'androidx.compose.ui:ui-tooling:1.4.0-rc01'
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation 'androidx.compose.foundation:foundation:1.4.0-rc01'
    // Material Design
    implementation 'androidx.compose.material:material:1.4.0-rc01'
    // Material design icons
    implementation 'androidx.compose.material:material-icons-core:1.4.0-rc01'
    implementation 'androidx.compose.material:material-icons-extended:1.4.0-rc01'
    // Integration with activities
    implementation 'androidx.activity:activity-compose:1.6.1'
    // Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.6.0'
    // Integration with observables
    implementation 'androidx.compose.runtime:runtime-livedata:1.4.0-rc01'
    // implementation 'androidx.compose.runtime:runtime-rxjava2:1.1.0-alpha06'

    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.4.0-rc01'

    // Pager: https://google.github.io/accompanist/pager/
    implementation 'com.google.accompanist:accompanist-pager:0.19.0'
    implementation 'com.google.accompanist:accompanist-pager-indicators:0.19.0'

    // https://stackoverflow.com/questions/68672046/how-to-use-animated-vector-drawable-in-compose
    implementation("androidx.compose.animation:animation-graphics:1.4.0-rc01")

    // Coil for instruction gifs
    implementation("io.coil-kt:coil-compose:1.3.2")
    implementation("io.coil-kt:coil-gif:1.3.2")

    // https://github.com/vanpra/compose-material-dialogs
    implementation "io.github.vanpra.compose-material-dialogs:color:0.6.2"
    implementation "io.github.vanpra.compose-material-dialogs:core:0.6.2"

    // https://developer.android.com/topic/libraries/architecture/datastore#kts
    implementation("androidx.datastore:datastore:1.0.0")
    implementation("androidx.datastore:datastore-preferences:1.0.0")

    // https://dagger.dev/hilt/gradle-setup
    implementation 'com.google.dagger:hilt-android:2.43.2'
    kapt 'com.google.dagger:hilt-compiler:2.43.2'

    // https://github.com/Kotlin/kotlinx.serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.0"

    // https://console.firebase.google.com/project/workout-pixel/overview
    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:29.0.0')

    // Add the dependency for the Firebase SDK for Google Analytics
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // Add the dependencies for any other desired Firebase products
    // https://firebase.google.com/docs/android/setup#available-libraries

    // https://developers.google.com/tag-platform/tag-manager/android/v5
    implementation 'com.google.android.gms:play-services-tagmanager:18.0.2'

/*
    implementation 'com.google.firebase:firebase-core:19.0.2'
    implementation 'com.google.firebase:firebase-analytics:19.0.2'
*/

    implementation "androidx.glance:glance-appwidget:1.0.0-alpha05"
    
    implementation "com.github.karim-attia:ChatbotComposeFramework:1.0.2"

}

repositories {
    mavenCentral()
    google()
}

apply plugin: 'com.google.gms.google-services'
